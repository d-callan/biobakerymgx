nextflow_workflow {

    name "Test workflow: BIOBAKERYMGX"
    script "workflows/biobakerymgx/main.nf"
    workflow "BIOBAKERYMGX"
    tag "workflows"
    tag "biobakerymgx"
    tag "biobakerymgx_default"

    test("fastq.gz") {
        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test' ],
                        [
                            file("$projectDir/assets/test-datasets/fastqs/SRX5235702_SRR8427717_1.fastq.gz", checkIfExists: true),
                            file("$projectDir/assets/test-datasets/fastqs/SRX5235702_SRR8427717_2.fastq.gz", checkIfExists: true),
                        ]
                    ],
                    [
                        [ id:'test2' ],
                        [
                            file("$projectDir/assets/test-datasets/fastqs/SRX5235702_SRR8427717_1.fastq.gz", checkIfExists: true),
                            file("$projectDir/assets/test-datasets/fastqs/SRX5235702_SRR8427717_2.fastq.gz", checkIfExists: true),
                        ]
                    ]
                )
                """
            }
            params {
                outdir                  = "$outputDir"
                kneaddata_db_version    = 'human_genome'
                metaphlan_db_version    = 'mpa_vJan21_TOY_CHOCOPhlAnSGB_202103'
                chocophlan_db_version   = 'DEMO'
                uniref_db_version       = 'DEMO_diamond'
                max_cpus                = 1
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.preprocessed_fastq_gz,
                    workflow.out.preprocessed_read_counts_tsv,
                    workflow.out.read_taxonomy_tsv,
                    workflow.out.genefamilies_tsv,
                    workflow.out.ec_tsv,
                    workflow.out.pathabundance_tsv,
                    workflow.out.pathcoverage_tsv,
                    workflow.out.versions
                    ).match()
                },
                { assert new File("$outputDir/multiqc/multiqc_report.html").exists() }
            )
        }
    }
}
